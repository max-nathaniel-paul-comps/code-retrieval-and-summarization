{"code": "\tpublic boolean hasRequestParameter() {\n\t\treturn ((mCurrentState != null) && (mCurrentState.mRequestParameter != null));\n\t}\n", "nl": "Check that the current state has a parameter"}
{"code": "\tpublic boolean visitNode(TextEdit edit) {\n\t\treturn true;\n\t}\n", "nl": "Always returns true"}
{"code": "\tpublic String getPathSeperator() {\n\t\treturn UnixModelAdmin.PATH_SEPERATOR;\n\t}\n", "nl": "Return the PATH_SEPERATOR"}
{"code": "    public Hashtable getPeerResolver() {\n        /*\n         * Hashtable peersclone = new Hashtable(); peersclone = (Hashtable)\n         * hashPeerResolvers.clone(); return peersclone;\n         */\n\n        return peerResolvers;\n    }\n", "nl": "Return peerResolver"}
{"code": "\tpublic double getGenreWeight(String genre) {\n\t\tDouble value = genres_.get(genre);\n\t\tif (value != null)\n\t\t\treturn value;\n\t\treturn 0;\n\t}\n", "nl": "Return the weight of a given genre"}
{"code": "  public String format(Date date) {\n    if (date == null) {\n      return \"\";\n    } else {\n      return DateTimeFormat.getShortDateFormat().format(date);\n    }\n  }\n", "nl": "Return the date formatted to a string according to DateTImeFormat.getShortDateFormat().format()"}
{"code": "    public void addValue(String vValue) {\n        if (value == null) {\n            setValue(new ArrayList<String>());\n        }\n\n        value.add(vValue);\n    }\n", "nl": "Add a given vValue string to the value list"}
{"code": "    public void setMp3(java.lang.String mp3) {\n        this.mp3 = mp3;\n    }\n", "nl": "Set the mp3 variable"}
{"code": "\tprivate void initialize() {\n\t\tthis.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tthis.setJMenuBar(getJJMenuBar());\n\t\tthis.setSize(802, 504);\n\t\tthis.setContentPane(getJContentPane());\n\t\tthis.setTitle(\"aerosys\");\n\t}\n", "nl": "Set the instance variables to their initial values"}
{"code": "    public List getSelectors() {\n        return new ArrayList(selectors);\n    }\n", "nl": "Return the selectors as List"}
{"code": "  public void setConfigUrl(String configUrl) throws Exception {\n  \tthis.configUrl = configUrl;\n  \tif(getLog().isDebugEnabled()) \n  \t\tgetLog().logDebug(\"setConfigUrl: \" + configUrl);\n  }\n", "nl": "Change the configUrl instance variable"}
{"code": "    private Number parseNumber(String source, double value, ParsePosition pos) {\n        Number ret = null;\n        \n        StringBuffer sb = new StringBuffer();\n        sb.append('(');\n        sb.append(value);\n        sb.append(')');\n        \n        int n = sb.length();\n        int startIndex = pos.getIndex();\n        int endIndex = startIndex + n;\n        if (endIndex < source.length()) {\n            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {\n                ret = new Double(value);\n                pos.setIndex(endIndex);\n            }\n        }\n        \n        return ret;\n    }\n", "nl": "Returns a Double wrapper of value if it appears in source at position pos"}
{"code": "        protected List getFreeTermsList() {\n            return (List)m_freeTermsStack.peek();\n        }\n", "nl": "Casts to list and returns the element at the top of the free terms stack"}
{"code": "\tpublic long getCurrentPageNum() {\n\t\treturn currentPageNum;\n\t}\n", "nl": "Get the current page number"}
{"code": "\tpublic void setPiece(AbstractPiece piece) {\n\t\tthis.piece = piece;\n\t}\n", "nl": "Set the piece of this square to the given piece"}
{"code": "    public void setUrl(String url) {\n        if (url.endsWith(\"/\")) {\n            this.toURL = url;\n        } else {\n            this.toURL = url + \"/\";\n        }\n    }\n", "nl": "Add a \"/\" to the url if it does not have one and store it"}
{"code": "    private void setEndBlock(int endBlock) {\n        this.endBlock = endBlock;\n    }\n", "nl": "Store the given int as endBlock"}
{"code": "\tpublic String getColumnOrder() {\n\t\tStringBuffer sb = new StringBuffer();\n\n\t\tfor ( int x = 0; x < tableColumns.size(); x++ )\n\t\t\tsb.append( tableColumns.get( x ).getIdentifier() ).append( ConfigFile.delimit );\n\n\t\treturn sb.toString();\n\t}\n", "nl": "Return a string of all the colomns listed"}
{"code": "\t\tpublic boolean equals(final Object o) {\n\t\t\tboolean retVal =false;\n\t\t\t\n\t\t\tif (o instanceof ContactViewInfo){\n\t\t\t\tContactViewInfo cvInfo = (ContactViewInfo) o;\n\t\t\t\tretVal = cvInfo.contactId.equals(this.contactId);\n\t\t\t}\n\t\t\t\t\n\t\t\treturn retVal;\n\t\t}\n", "nl": "Compares two ContactViewInfo objects by their contactId"}
{"code": "    public boolean equals( Object theOtherOne) {\n        return ( theOtherOne instanceof EntryLease) &&\n            ( this.remoteSpace.equals( ((EntryLease) theOtherOne).remoteSpace)) &&\n            ( this.id == ((EntryLease) theOtherOne).id);\n    }\n", "nl": "Accepts two leases as equal if they have the same remote space and id"}
{"code": "    public int getCarsPerHour() {\n        return carsPerHour;\n    }\n", "nl": "Returns the number of cars per hour"}
